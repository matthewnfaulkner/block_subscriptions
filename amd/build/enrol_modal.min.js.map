{"version":3,"file":"enrol_modal.min.js","sources":["../src/enrol_modal.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * This module provides the course copy modal from the course and\r\n * category management screen.\r\n *\r\n * @module     format_apoapage/copy_modal\r\n * @copyright  2020 onward The Moodle Users Association <https://moodleassociation.org/>\r\n * @author     Matt Porritt <mattp@catalyst-au.net>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @since      3.9\r\n */\r\n\r\ndefine(['jquery', 'core/str', 'core/modal_factory',\r\n        'core/ajax', 'core/fragment', 'core/notification'],\r\n        function($, Str, ModalFactory, ajax, Fragment, Notification) {\r\n\r\n    /**\r\n     * Module level variables.\r\n     */\r\n    var CancelModal = {};\r\n    var contextid;\r\n    var enrolId;\r\n    var plugin;\r\n    var subscriptionId;\r\n    var course;\r\n    var modalObj;\r\n    var spinner = '<p class=\"text-center\">'\r\n        + '<i class=\"fa fa-spinner fa-pulse fa-2x fa-fw\"></i>'\r\n        + '</p>';\r\n\r\n    /**\r\n     * Creates the modal for the course copy form\r\n     *\r\n     * @private\r\n     */\r\n    function createModal() {\r\n        // Get the Title String.\r\n        Str.get_string('loading').then(function(title) {\r\n            // Create the Modal.\r\n            ModalFactory.create({\r\n                type: ModalFactory.types.DEFAULT,\r\n                title: title,\r\n                body: spinner,\r\n                large: true\r\n            })\r\n            .done(function(modal) {\r\n                modalObj = modal;\r\n                // Explicitly handle form click events.\r\n                modalObj.getRoot().on('click', '#id_submit', function(e) {\r\n                    e.formredirect = true;\r\n                    processModalForm(e);\r\n\r\n                });\r\n                modalObj.getRoot().on('click', '#id_cancel', function(e) {\r\n                    e.preventDefault();\r\n                    modalObj.setBody(spinner);\r\n                    modalObj.hide();\r\n                });\r\n            });\r\n            return;\r\n        }).catch(function() {\r\n            Notification.exception(new Error('Failed to load string: loading'));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates the body of the modal window.\r\n     *\r\n     * @param {Object} formdata\r\n     * @private\r\n     */\r\n    function updateModalBody(formdata) {\r\n        if (typeof formdata === \"undefined\") {\r\n            formdata = {};\r\n        }\r\n        if (typeof enrolId !== \"undefined\"){\r\n            var params = {\r\n                'jsonformdata': JSON.stringify(formdata),\r\n                'enrolid': enrolId,\r\n                'plugin' : plugin\r\n            };\r\n            modalObj.setBody(spinner);\r\n            Str.get_string('subscribetitle', 'block_subscriptions', course.shortname).then(function(title) {\r\n                modalObj.setTitle(title);\r\n                modalObj.setBody(Fragment.loadFragment('block_subscriptions', 'new_enrol_form', contextid, params));\r\n                return;\r\n            }).catch(function() {\r\n                Notification.exception(new Error('Failed to load string: copycoursetitle'));\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Updates Moodle form with selected information.\r\n     *\r\n     * @param {Object} e\r\n     * @private\r\n     */\r\n    function processModalForm(e) {\r\n        e.preventDefault(); // Stop modal from closing.\r\n\r\n        // Form data.\r\n        var cancelform = modalObj.getRoot().find('form').serialize();\r\n        //var formjson = JSON.stringify(cancelform);\r\n\r\n        var ueid = modalObj.getRoot().find('input[name=\"ueid\"]').val();\r\n        // Handle invalid form fields for better UX.\r\n        var invalid = $.merge(\r\n                modalObj.getRoot().find('[aria-invalid=\"true\"]'),\r\n                modalObj.getRoot().find('.error')\r\n        );\r\n\r\n        if (invalid.length) {\r\n            invalid.first().focus();\r\n            return;\r\n        }\r\n\r\n\r\n        // Submit form via ajax.\r\n        ajax.call([{\r\n            methodname: 'core_enrol_enrol_user_enrolment',\r\n            args: {\r\n                ueid: ueid\r\n            },\r\n        }])[0].done(function() {\r\n            // For submission succeeded.\r\n            modalObj.setBody(spinner);\r\n            modalObj.hide();\r\n            console.log(course.shortname);\r\n            ajax.call([{\r\n                methodname: 'block_subscriptions_notify',\r\n                args:{\r\n                    cancelled: true,\r\n                    coursename: course.shortname\r\n                }\r\n            }])[0].done(function(){\r\n                window.location.reload();\r\n            }).fail(function(fail){\r\n                console.log(fail);\r\n            });\r\n        }).fail(function(){\r\n            // Form submission failed server side, redisplay with errors.\r\n            updateModalBody(cancelform);\r\n        });\r\n    }\r\n    /**\r\n     * Initialise the class.\r\n     *\r\n     * @method\r\n     * @param {Object} context\r\n     * @param {Int} subscription\r\n     * @public\r\n     */\r\n    CancelModal.init = function(context, subscription) {\r\n        contextid = context;\r\n        subscriptionId = subscription;\r\n        // Setup the initial Modal.\r\n        createModal();\r\n        // Setup the click handlers on the copy buttons.\r\n        $('.action-cancel-' + subscriptionId).on('click', function(e) {\r\n            e.preventDefault(); // Stop. Hammer time.\r\n            let url = new URL(this.getAttribute('href'));\r\n            let params = new URLSearchParams(url.search);\r\n            enrolId = params.get('enrolid');\r\n            plugin = params.get('plugin');\r\n            let courseId = params.get('courseid');\r\n            if(courseId !== null){\r\n                ajax.call([{ // Get the course information.\r\n                    methodname: 'core_course_get_courses',\r\n                    args: {\r\n                        'options': {'ids': [courseId]},\r\n                    },\r\n                }])[0].done(function(response) {\r\n                    // We have the course info get the modal content.\r\n                    course = response[0];\r\n                    updateModalBody();\r\n                }).fail(function() {\r\n                    Notification.exception(new Error('Failed to load course'));\r\n                });\r\n            }\r\n            else{\r\n                updateModalBody();\r\n            }\r\n            modalObj.show();\r\n        });\r\n\r\n    };\r\n\r\n    return CancelModal;\r\n});\r\n"],"names":["define","$","Str","ModalFactory","ajax","Fragment","Notification","contextid","enrolId","plugin","subscriptionId","course","modalObj","CancelModal","spinner","createModal","get_string","then","title","create","type","types","DEFAULT","body","large","done","modal","getRoot","on","e","formredirect","preventDefault","cancelform","find","serialize","ueid","val","invalid","merge","length","first","focus","call","methodname","args","setBody","hide","console","log","shortname","cancelled","coursename","window","location","reload","fail","updateModalBody","processModalForm","catch","exception","Error","formdata","params","JSON","stringify","setTitle","loadFragment","init","context","subscription","url","URL","this","getAttribute","URLSearchParams","search","get","courseId","response","show"],"mappings":";;;;;;;;;;AA0BAA,yCAAO,CAAC,SAAU,WAAY,qBACtB,YAAa,gBAAiB,sBAC9B,SAASC,EAAGC,IAAKC,aAAcC,KAAMC,SAAUC,kBAM/CC,UACAC,QACAC,OACAC,eACAC,OACAC,SANAC,YAAc,GAOdC,QAAU,yFASLC,cAELb,IAAIc,WAAW,WAAWC,MAAK,SAASC,OAEpCf,aAAagB,OAAO,CAChBC,KAAMjB,aAAakB,MAAMC,QACzBJ,MAAOA,MACPK,KAAMT,QACNU,OAAO,IAEVC,MAAK,SAASC,QACXd,SAAWc,OAEFC,UAAUC,GAAG,QAAS,cAAc,SAASC,GAClDA,EAAEC,cAAe,WAkDPD,GACtBA,EAAEE,qBAGEC,WAAapB,SAASe,UAAUM,KAAK,QAAQC,YAG7CC,KAAOvB,SAASe,UAAUM,KAAK,sBAAsBG,MAErDC,QAAUpC,EAAEqC,MACR1B,SAASe,UAAUM,KAAK,yBACxBrB,SAASe,UAAUM,KAAK,cAG5BI,QAAQE,mBACRF,QAAQG,QAAQC,QAMpBrC,KAAKsC,KAAK,CAAC,CACPC,WAAY,kCACZC,KAAM,CACFT,KAAMA,SAEV,GAAGV,MAAK,WAERb,SAASiC,QAAQ/B,SACjBF,SAASkC,OACTC,QAAQC,IAAIrC,OAAOsC,WACnB7C,KAAKsC,KAAK,CAAC,CACPC,WAAY,6BACZC,KAAK,CACDM,WAAW,EACXC,WAAYxC,OAAOsC,cAEvB,GAAGxB,MAAK,WACR2B,OAAOC,SAASC,YACjBC,MAAK,SAASA,MACbR,QAAQC,IAAIO,YAEjBA,MAAK,WAEJC,gBAAgBxB,eA7FRyB,CAAiB5B,MAGrBjB,SAASe,UAAUC,GAAG,QAAS,cAAc,SAASC,GAClDA,EAAEE,iBACFnB,SAASiC,QAAQ/B,SACjBF,SAASkC,gBAIlBY,OAAM,WACLpD,aAAaqD,UAAU,IAAIC,MAAM,+CAUhCJ,gBAAgBK,kBACG,IAAbA,WACPA,SAAW,SAEQ,IAAZrD,QAAwB,KAC3BsD,OAAS,cACOC,KAAKC,UAAUH,kBACpBrD,eACAC,QAEfG,SAASiC,QAAQ/B,SACjBZ,IAAIc,WAAW,iBAAkB,sBAAuBL,OAAOsC,WAAWhC,MAAK,SAASC,OACpFN,SAASqD,SAAS/C,OAClBN,SAASiC,QAAQxC,SAAS6D,aAAa,sBAAuB,iBAAkB3D,UAAWuD,YAE5FJ,OAAM,WACLpD,aAAaqD,UAAU,IAAIC,MAAM,sDAmE7C/C,YAAYsD,KAAO,SAASC,QAASC,cACjC9D,UAAY6D,QACZ1D,eAAiB2D,aAEjBtD,cAEAd,EAAE,kBAAoBS,gBAAgBkB,GAAG,SAAS,SAASC,GACvDA,EAAEE,qBACEuC,IAAM,IAAIC,IAAIC,KAAKC,aAAa,SAChCX,OAAS,IAAIY,gBAAgBJ,IAAIK,QACrCnE,QAAUsD,OAAOc,IAAI,WACrBnE,OAASqD,OAAOc,IAAI,cAChBC,SAAWf,OAAOc,IAAI,YACV,OAAbC,SACCzE,KAAKsC,KAAK,CAAC,CACPC,WAAY,0BACZC,KAAM,SACS,KAAQ,CAACiC,eAExB,GAAGpD,MAAK,SAASqD,UAEjBnE,OAASmE,SAAS,GAClBtB,qBACDD,MAAK,WACJjD,aAAaqD,UAAU,IAAIC,MAAM,6BAIrCJ,kBAEJ5C,SAASmE,WAKVlE"}